'use client'

import { useState, useEffect, useRef } from 'react'
import { MessageCircle, Clock, Users, TrendingUp, Star, CheckCircle2, ArrowRight, Bot, UserCheck, Target, Zap } from 'lucide-react'

const chatMessages = [
  {
    id: 1,
    type: 'user',
    message: '–ò—â—É –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∂–µ–Ω—ã –Ω–∞ –≥–æ–¥–æ–≤—â–∏–Ω—É. –ë—é–¥–∂–µ—Ç –¥–æ 50 000 —Ä—É–±–ª–µ–π.',
    timestamp: '14:32'
  },
  {
    id: 2,
    type: 'ai',
    message: '–ö–∞–∫–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –ø–æ–≤–æ–¥! üéâ –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à –±—é–¥–∂–µ—Ç, –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –≤–∞—à–∞ —Å—É–ø—Ä—É–≥–∞: —É–∫—Ä–∞—à–µ–Ω–∏—è, –ø–∞—Ä—Ñ—é–º, —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ —á—Ç–æ-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?',
    timestamp: '14:32'
  },
  {
    id: 3,
    type: 'user',
    message: '–û–Ω–∞ –ª—é–±–∏—Ç —É–∫—Ä–∞—à–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–ª—å—Ü–∞ —Å –∫–∞–º–Ω—è–º–∏.',
    timestamp: '14:33'
  },
  {
    id: 4,
    type: 'ai',
    message: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –£ –Ω–∞—Å –µ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–æ–ª–µ—Ü —Å —Å–∞–ø—Ñ–∏—Ä–∞–º–∏ –æ—Ç 35 000‚ÇΩ –∏ –∏–∑—É–º—Ä—É–¥–∞–º–∏ –æ—Ç 42 000‚ÇΩ. –¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–ª—å—Ü–æ —Å —Ç–∞–Ω–∑–∞–Ω–∏—Ç–æ–º - –æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π –∫–∞–º–µ–Ω—å, 48 000‚ÇΩ. –ö–∞–∫–æ–π –∫–∞–º–µ–Ω—å –æ–Ω–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç?',
    timestamp: '14:33'
  },
  {
    id: 5,
    type: 'user',
    message: '–°–∞–ø—Ñ–∏—Ä—ã - –µ—ë –ª—é–±–∏–º—ã–µ!',
    timestamp: '14:34'
  },
  {
    id: 6,
    type: 'ai',
    message: '–ò–¥–µ–∞–ª—å–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å –∫–æ–ª—å—Ü–æ —Å —Å–∏–Ω–∏–º —Å–∞–ø—Ñ–∏—Ä–æ–º 2 –∫–∞—Ä–∞—Ç–∞ –≤ –ø–ª–∞—Ç–∏–Ω–æ–≤–æ–π –æ–ø—Ä–∞–≤–µ –∑–∞ 45 000‚ÇΩ. –ú–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∫—É –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ?',
    timestamp: '14:34'
  }
]


const statistics = [
  {
    icon: TrendingUp,
    value: '+67%',
    label: '–†–æ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
    description: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º'
  },
  {
    icon: Clock,
    value: '24/7',
    label: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ',
    description: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤'
  },
  {
    icon: Users,
    value: '‚àû',
    label: '–ö–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
    description: '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å'
  },
  {
    icon: Target,
    value: '94%',
    label: '–¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
    description: '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫'
  }
]

export default function AIConsultant() {
  const [visibleMessages, setVisibleMessages] = useState<number>(0)
  const [isTyping, setIsTyping] = useState(false)
  const [visibleStats, setVisibleStats] = useState<number[]>([])
  const sectionRef = useRef<HTMLElement>(null)
  const chatRef = useRef<HTMLDivElement>(null)
  const chatMessagesRef = useRef<HTMLDivElement>(null)
  const statsRef = useRef<HTMLDivElement>(null)

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
  useEffect(() => {
    if (visibleMessages < chatMessages.length) {
      const timer = setTimeout(() => {
        setIsTyping(true)
        setTimeout(() => {
          setVisibleMessages(prev => prev + 1)
          setIsTyping(false)
        }, 1500)
      }, 2500)
      return () => clearTimeout(timer)
    }
  }, [visibleMessages])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (chatMessagesRef.current && (visibleMessages > 0 || isTyping)) {
      const container = chatMessagesRef.current
      setTimeout(() => {
        container.scrollTo({
          top: container.scrollHeight,
          behavior: 'smooth'
        })
      }, 300)
    }
  }, [visibleMessages, isTyping])

  // Intersection Observer –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const element = entry.target as HTMLElement
            
            if (element === chatRef.current && visibleMessages === 0) {
              setVisibleMessages(1)
            }

            if (element === statsRef.current) {
              statistics.forEach((_, index) => {
                setTimeout(() => {
                  setVisibleStats(prev => [...prev, index])
                }, index * 150)
              })
            }
          }
        })
      },
      { threshold: 0.3, rootMargin: '-50px' }
    )

    const currentChatRef = chatRef.current
    const currentStatsRef = statsRef.current

    if (currentChatRef) observer.observe(currentChatRef)
    if (currentStatsRef) observer.observe(currentStatsRef)

    return () => {
      if (currentChatRef) observer.unobserve(currentChatRef)
      if (currentStatsRef) observer.unobserve(currentStatsRef)
    }
  }, [])

  return (
    <section ref={sectionRef} className="ai-consultant-section">
      <div className="ai-consultant-container">
        {/* Header */}
        <div className="ai-consultant-header">
          <div className="consultant-badge">
            <Bot className="badge-icon" />
            <span className="badge-text">–ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –î–ñ–ê–†–í–ò–°</span>
          </div>
          
          <h2 className="ai-consultant-title">
            –î–ñ–ê–†–í–ò–° –∑–∞–º–µ–Ω—è–µ—Ç <span className="gradient-text">—Ü–µ–ª—É—é –∫–æ–º–∞–Ω–¥—É</span> –ø—Ä–æ–¥–∞–≤—Ü–æ–≤-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤
          </h2>
          
          <p className="ai-consultant-subtitle">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7, –æ–±—â–∞–µ—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã 
            –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
          </p>
        </div>

        {/* Chat Demo */}
        <div ref={chatRef} className="chat-demo-container">
          <div className="chat-demo-header">
            <div className="chat-indicator">
              <div className="status-dot online" />
              <span>–î–ñ–ê–†–í–ò–° –æ–Ω–ª–∞–π–Ω</span>
            </div>
            <div className="chat-info">
              <MessageCircle className="chat-icon" />
              <span>–ñ–∏–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è</span>
            </div>
          </div>
          
          <div ref={chatMessagesRef} className="chat-messages" style={{ maxHeight: '400px', overflowY: 'auto' }}>
            {chatMessages.slice(0, visibleMessages).map((msg, index) => (
              <div
                key={msg.id}
                className={`message ${msg.type === 'ai' ? 'ai-message' : 'user-message'} message-${index}`}
              >
                <div className="message-avatar">
                  {msg.type === 'ai' ? <Bot size={16} /> : <UserCheck size={16} />}
                </div>
                <div className="message-content">
                  <div className="message-text">{msg.message}</div>
                  <div className="message-time">{msg.timestamp}</div>
                </div>
              </div>
            ))}

            {isTyping && (
              <div className="message ai-message typing-message">
                <div className="message-avatar">
                  <Bot size={16} />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

          </div>
        </div>


        {/* Statistics */}
        <div ref={statsRef} className="stats-section">
          <h3 className="stats-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –î–ñ–ê–†–í–ò–°</h3>
          
          <div className="stats-grid">
            {statistics.map((stat, index) => (
              <div 
                key={index} 
                className={`stat-card ${visibleStats.includes(index) ? 'visible' : ''}`}
              >
                <div className="stat-icon">
                  <stat.icon />
                </div>
                <div className="stat-value">{stat.value}</div>
                <div className="stat-label">{stat.label}</div>
                <div className="stat-description">{stat.description}</div>
              </div>
            ))}
          </div>
        </div>

      </div>
    </section>
  )
}

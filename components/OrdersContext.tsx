'use client'

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'

export type OrderStatus = 'pending' | 'confirmed' | 'rejected'

export interface OrderItem {
  id: string
  name: string
  subtitle: string
  price: string
  currency: string
}

export interface Order {
  id: string
  userId: string
  userEmail: string
  items: OrderItem[]
  customerInfo: {
    fullName: string
    phone: string
    siteDescription: string
    referenceLink?: string
  }
  status: OrderStatus
  createdAt: string
  updatedAt: string
}

interface OrdersContextType {
  orders: Order[]
  getUserOrders: (userId: string) => Order[]
  getAllOrders: () => Order[]
  createOrder: (order: Omit<Order, 'id' | 'createdAt' | 'updatedAt'>) => string
  updateOrderStatus: (orderId: string, status: OrderStatus) => void
  getOrder: (orderId: string) => Order | undefined
}

const OrdersContext = createContext<OrdersContextType | undefined>(undefined)

export function OrdersProvider({ children }: { children: ReactNode }) {
  const [orders, setOrders] = useState<Order[]>([])
  const [isInitialized, setIsInitialized] = useState(false)
  const providerId = React.useMemo(() => `OrdersProvider_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, [])

  React.useEffect(() => {
    console.log('üè≠ OrdersProvider —Å–æ–∑–¥–∞–Ω —Å ID:', providerId)
    return () => {
      console.log('üóëÔ∏è OrdersProvider —É–Ω–∏—á—Ç–æ–∂–µ–Ω —Å ID:', providerId)
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const savedOrders = localStorage.getItem('jarvis_orders')
      console.log(`[${providerId}] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage:`, savedOrders)
      if (savedOrders) {
        try {
          const parsedOrders = JSON.parse(savedOrders)
          console.log(`[${providerId}] –ó–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, parsedOrders)
          setOrders(parsedOrders)
        } catch (error) {
          console.error('Error loading orders from localStorage:', error)
        }
      } else {
        console.log(`[${providerId}] –ó–∞–∫–∞–∑—ã –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`)
      }
      setIsInitialized(true)
    }
  }, [])

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  useEffect(() => {
    if (typeof window !== 'undefined' && isInitialized) {
      console.log(`[${providerId}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ localStorage:`, orders)
      localStorage.setItem('jarvis_orders', JSON.stringify(orders))
    }
  }, [orders, isInitialized])

  const getUserOrders = (userId: string): Order[] => {
    return orders.filter(order => order.userId === userId)
  }

  const getAllOrders = (): Order[] => {
    console.log(`[${providerId}] getAllOrders() –≤—ã–∑–≤–∞–Ω, —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:`, orders)
    return orders
  }

  const createOrder = (orderData: Omit<Order, 'id' | 'createdAt' | 'updatedAt'>): string => {
    const orderId = `order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    const now = new Date().toISOString()

    const newOrder: Order = {
      ...orderData,
      id: orderId,
      status: 'pending',
      createdAt: now,
      updatedAt: now
    }

    console.log(`[${providerId}] OrdersContext: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:`, newOrder)
    setOrders(prevOrders => {
      const updatedOrders = [...prevOrders, newOrder]
      console.log(`[${providerId}] OrdersContext: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:`, updatedOrders)
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('jarvis_orders', JSON.stringify(updatedOrders))
        console.log(`[${providerId}] OrdersContext: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage`)
      }
      return updatedOrders
    })
    return orderId
  }

  const updateOrderStatus = (orderId: string, status: OrderStatus): void => {
    console.log(`[${providerId}] updateOrderStatus –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:`, orderId, '–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', status)
    setOrders(prevOrders => {
      const updatedOrders = prevOrders.map(order =>
        order.id === orderId
          ? { ...order, status, updatedAt: new Date().toISOString() }
          : order
      )
      console.log(`[${providerId}] updateOrderStatus: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:`, updatedOrders)
      return updatedOrders
    })
  }

  const getOrder = (orderId: string): Order | undefined => {
    return orders.find(order => order.id === orderId)
  }

  return (
    <OrdersContext.Provider
      value={{
        orders,
        getUserOrders,
        getAllOrders,
        createOrder,
        updateOrderStatus,
        getOrder,
      }}
    >
      {children}
    </OrdersContext.Provider>
  )
}

export function useOrders() {
  const context = useContext(OrdersContext)
  if (context === undefined) {
    throw new Error('useOrders must be used within an OrdersProvider')
  }
  return context
}
